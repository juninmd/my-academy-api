generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Exercises {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  image    String
  tips     String
  mistakes String
  workouts Workouts[]
}

model Methods {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  workouts    Workouts[]
}

model Workouts {
  id               Int             @id @default(autoincrement())
  exerciseId       Int
  description      String
  workoutsGroupsId Int
  methodId         Int?
  workoutSeries    WorkoutSeries[]
  exercise         Exercises       @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  method           Methods?        @relation(fields: [methodId], references: [id], onDelete: Cascade)
  workoutGroup     WorkoutsGroups  @relation(fields: [workoutsGroupsId], references: [id], onDelete: Cascade)

  @@unique([workoutsGroupsId, exerciseId])
}

model WorkoutsGroups {
  id              Int               @id @default(autoincrement())
  name            String
  image           String
  userId          String
  WorkoutSessions WorkoutSessions[]
  workouts        Workouts[]
  user            Users             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
}

model Users {
  id             String           @id
  name           String
  email          String
  photoUrl       String           @default("https://w7.pngwing.com/pngs/620/837/png-transparent-bodybuilding-drawing-bodybuilding-physical-fitness-logo-monochrome-thumbnail.png")
  telegramId     String?
  workoutsGroups WorkoutsGroups[]
  Personals      Personals[]      @relation("personal")
  Students       Personals[]      @relation("student")
}

model WorkoutSeries {
  id          Int      @id @default(autoincrement())
  workoutId   Int
  repetitions Int      @default(15)
  weight      Int?     @default(10)
  rest        Int?     @default(60)
  workout     Workouts @relation(fields: [workoutId], references: [id], onDelete: Cascade)
}

model WorkoutSessions {
  id             Int            @id @default(autoincrement())
  date           DateTime       @default(now()) @db.Date
  workoutGroupId Int
  workoutsGroups WorkoutsGroups @relation(fields: [workoutGroupId], references: [id], onDelete: Cascade)
}

model Personals {
  id                    Int                     @id @default(autoincrement())
  StudentUser           Users                   @relation("student", fields: [studentUserId], references: [id], onDelete: Cascade)
  studentUserId         String
  PersonalUser          Users                   @relation("personal", fields: [personalUserId], references: [id], onDelete: Cascade)
  personalUserId        String
  PersonalClassSchedule PersonalClassSchedule[]

  @@unique([studentUserId, personalUserId])
}

model PersonalClassSchedule {
  id          Int       @id @default(autoincrement())
  dayOfWeek   Int // Dia da semana (ex: "Monday", "Tuesday", etc.)
  time        String // Hor√°rio da aula (ex: "18:30", "07:00")
  personalsId Int // Chave estrangeira para o modelo Personals
  personals   Personals @relation(fields: [personalsId], references: [id], onDelete: Cascade)
}
