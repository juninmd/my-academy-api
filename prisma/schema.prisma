generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  // shadowDatabaseUrl = env(“SHADOW_DATABASE_URL”)
}

model Exercises {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  image       String
  tips        String
  mistakes    String
  description String?
  Workouts    Workouts[]
}

model Methods {
  id             Int              @id @default(autoincrement())
  name           String
  description    String
  WorkoutsGroups WorkoutsGroups[]
}

model Workouts {
  id               Int               @id @default(autoincrement())
  exerciseId       Int
  description      String
  workoutsGroupsId Int
  workoutGroup     WorkoutsGroups    @relation(fields: [workoutsGroupsId], references: [id])
  Exercise         Exercises         @relation(fields: [exerciseId], references: [id])
  WorkoutSeries    WorkoutSeries[]
  WorkoutSessions  WorkoutSessions[]
}

model WorkoutsGroups {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  image       String
  dateStart   DateTime
  dateEnd     DateTime
  level       Int
  userId      Int
  methodId    Int?
  user        Users      @relation(fields: [userId], references: [id])
  method      Methods?   @relation(fields: [methodId], references: [id])
  Workouts    Workouts[]
}

model Users {
  id             Int              @id @default(autoincrement())
  name           String
  email          String
  Personals      Personals[]
  Students       Students[]
  WorkoutsGroups WorkoutsGroups[]
}

model WorkoutSeries {
  id          Int      @id @default(autoincrement())
  repetitions Int      @default(15)
  weight      Int?
  rest        Int
  workoutId   Int
  Workout     Workouts @relation(fields: [workoutId], references: [id])
}

model WorkoutSessions {
  id              Int      @id @default(autoincrement())
  workoutId       Int
  date            DateTime
  WorkoutSessions Workouts @relation(fields: [workoutId], references: [id])
}

model Personals {
  id       Int        @id @default(autoincrement())
  userId   Int
  user     Users      @relation(fields: [userId], references: [id])
  Students Students[]
}

model Students {
  id          Int        @id @default(autoincrement())
  userId      Int
  personalsId Int?
  Personals   Personals? @relation(fields: [personalsId], references: [id])
  Users       Users      @relation(fields: [userId], references: [id])
}
