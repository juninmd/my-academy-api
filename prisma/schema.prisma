generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  // shadowDatabaseUrl = env(“SHADOW_DATABASE_URL”)
}

model Exercises {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  image       String
  tips        String
  mistakes    String
  description String?
  workouts    Workouts[]
}

model Methods {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  workouts    Workouts[]
}

model Workouts {
  id               Int             @id @default(autoincrement())
  exerciseId       Int
  description      String
  workoutsGroupsId Int
  workoutGroup     WorkoutsGroups  @relation(fields: [workoutsGroupsId], references: [id])
  exercise         Exercises       @relation(fields: [exerciseId], references: [id])
  workoutSeries    WorkoutSeries[]
  method           Methods?        @relation(fields: [methodId], references: [id])
  methodId         Int?
}

model WorkoutsGroups {
  id              Int               @id @default(autoincrement())
  name            String
  description     String
  image           String
  dateStart       DateTime
  dateEnd         DateTime
  level           Int
  userId          Int
  user            Users             @relation(fields: [userId], references: [id])
  workouts        Workouts[]
  WorkoutSessions WorkoutSessions[]
}

model Users {
  id                     Int                      @id @default(autoincrement())
  name                   String
  email                  String
  photoUrl               String                   @default("https://w7.pngwing.com/pngs/620/837/png-transparent-bodybuilding-drawing-bodybuilding-physical-fitness-logo-monochrome-thumbnail.png")
  personals              Personals[]
  students               Students[]
  workoutsGroups         WorkoutsGroups[]
  WorkoutPeronalSessions WorkoutPeronalSessions[]
}

model WorkoutSeries {
  id          Int      @id @default(autoincrement())
  repetitions Int      @default(15)
  weight      Int?     @default(10)
  rest        Int?     @default(60)
  workoutId   Int
  workout     Workouts @relation(fields: [workoutId], references: [id])
}

model WorkoutSessions {
  id             Int            @id @default(autoincrement())
  workoutGroupId Int
  date           DateTime       @default(now()) @db.Date
  workoutsGroups WorkoutsGroups @relation(fields: [workoutGroupId], references: [id])
}

model Personals {
  id                     Int                      @id @default(autoincrement())
  userId                 Int
  user                   Users                    @relation(fields: [userId], references: [id])
  students               Students[]
  WorkoutPeronalSessions WorkoutPeronalSessions[]
}

model Students {
  id          Int        @id @default(autoincrement())
  userId      Int
  personalsId Int?
  personals   Personals? @relation(fields: [personalsId], references: [id])
  users       Users      @relation(fields: [userId], references: [id])
}

model WorkoutPeronalSessions {
  id          Int       @id @default(autoincrement())
  date        DateTime? @db.Date
  personalsId Int
  personals   Personals @relation(fields: [personalsId], references: [id])
  users       Users     @relation(fields: [userId], references: [id])
  userId      Int
  observation String?
}
